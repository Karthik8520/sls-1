service: serverless-work-1

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1

package:
  individually: true

resources:
  Resources:
    testQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "testQueue"
    demoQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "demoQueue"
    TestQueuePublishRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: TestQueuePublishRole
        AssumeRolePolicyDocument: # This is a required property, this defines to what or whom this role can be applied
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:  # This defines the resource/service/user..etc to which the role can be applied
                  - lambda.amazonaws.com # Here, this role can be assigned to any of the lambdas function 
              Action: 
                - sts:AssumeRole # This action can be taken by the above mentioned resource/service/user. (sts:AssumeRole means the person in Principal can assume this role, in our case we are giving power to all lambda function to assume this role, if role got assigned to a lambda fn)
        Policies:
          - PolicyName: TestQueuePublish
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'sqs:SendMessage'
                    - 'sqs:GetQueueUrl'
                    - 'sqs:SendMessageBatch'
                  Resource: !GetAtt testQueue.Arn
    

layers:
  UtilsLayer:
    path: './layers/utils/'
    name: 'UtilsLayer'

functions:
  testFunction:
    runtime: nodejs18.x
    handler: './controllers/test/test.handler'
    events: 
      - http:
          path: '/url/test'
          method: 'get'
      - sqs:
          arn: !GetAtt testQueue.Arn
    environment: 
      QueueURL: !Ref testQueue
  
  demoFunction:
    runtime: nodejs18.x
    handler: './controllers/test/demo_run.handler'
    events: 
      - http:
          path: '/url/demo'
          method: 'get'
      - sqs:
          arn: !GetAtt demoQueue.Arn
    environment: 
      QueueURL: !Ref demoQueue
    layers:
      - !Ref UtilsLayerLambdaLayer # The name is `${layerName}LambdaLayer`, the string "LambdaLayer" has to be appended as per docs

  
  publisherFunction:
    runtime: nodejs18.x
    handler: './controllers/test/sqsPublisher.handler'
    role: TestQueuePublishRole
    environment: 
      QueueURL: !Ref testQueue
    events: 
      - http:
          path: '/url/publish'
          method: 'get'

# Define custom hooks to run npm install before deployment 
# (Below is not working, but added so that in future we can find out it's use)
custom:
  hooks:
    'before:deploy:createDeploymentArtifacts': cd controllers/test && npm install